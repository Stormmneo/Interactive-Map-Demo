<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Map with Styled Dynamic Markers</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        /* Map container */
        #map { height: 500px; width: 100%; }

        /* Custom label styling */
        .text-label {
            background-color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            box-shadow: 0px 1px 4px rgba(0,0,0,0.2);
            color: #333;
        }
    </style>
</head>
<body>

<div id="map"></div>

<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script>
// Initialize map centered on Singapore
const map = L.map('map').setView([1.3521, 103.8198], 11);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: 'Â© OpenStreetMap contributors'
}).addTo(map);

// Replace with your Google API key
const googleApiKey = 'AIzaSyDH0LS4Fh6305T3y9h8Ef8rg5Hx509umqo';

// Function to fetch coordinates
async function getCoordinates(address) {
    const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${googleApiKey}`);
    const data = await response.json();

    if (data.status === "OK") {
        const location = data.results[0].geometry.location;
        return [location.lat, location.lng];
    } else {
        console.error("Geocoding API error:", data.status);
        return null;
    }
}

// Define locations with addresses
const locations = [
    { address: "Marina Bay Sands, Singapore", title: "Company 1", info: "Details for Company 1" },
    { address: "Singapore Flyer, Singapore", title: "Company 2", info: "Details for Company 2" },
    { address: "Changi Airport, Singapore", title: "Company 3", info: "Details for Company 3" }
];

// Add markers with styled labels
async function addMarkers() {
    for (const location of locations) {
        const coords = await getCoordinates(location.address);

        if (coords) {
            // Main marker with popup
            const marker = L.marker(coords).addTo(map).bindPopup(`<b>${location.title}</b><br>${location.info}`);

            // Custom label as a separate marker, slightly offset to the right
            const labelIcon = L.divIcon({
                html: `<span class="text-label">${location.title}</span>`,
                className: '', // Keep empty if you don't want additional Leaflet classes
                iconSize: [100, 20],
                iconAnchor: [0, 0] // Control alignment
            });

            // Add label marker to map, slightly offset
            L.marker([coords[0], coords[1] + 0.002], { icon: labelIcon }).addTo(map);
        } else {
            console.error(`Failed to get coordinates for ${location.address}`);
        }
    }
}

// Call the function to add markers
addMarkers();
</script>

</body>
</html>
